SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SET citus.shard_count = 2; -- one per worker
CREATE TABLE index_test(id int, value_1 int, value_2 int);
SELECT create_distributed_table('index_test', 'id');
 create_distributed_table 
--------------------------
 
(1 row)

-- kill the connection when create command is issued
SELECT citus.mitmproxy('conn.onQuery(query="CREATE").kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT citus.clear_network_traffic();
 clear_network_traffic 
-----------------------
 
(1 row)

CREATE INDEX CONCURRENTLY idx_index_test ON index_test(id, value_1);
ERROR:  CONCURRENTLY-enabled index command failed
DETAIL:  CONCURRENTLY-enabled index commands can fail partially, leaving behind an INVALID index.
HINT:  Use DROP INDEX CONCURRENTLY IF EXISTS to remove the invalid index, then retry the original command.
SELECT citus.dump_network_traffic();
                                                                                                                                                                                                                                                                     dump_network_traffic                                                                                                                                                                                                                                                                     

 (0,t,"[initial message]")
 (0,f,"['AuthenticationOk()', 'ParameterStatus(application_name=citus)', 'ParameterStatus(client_encoding=UTF8)', 'ParameterStatus(DateStyle=ISO, MDY)', 'ParameterStatus(integer_datetimes=on)', 'ParameterStatus(IntervalStyle=postgres)', 'ParameterStatus(is_superuser=on)', 'ParameterStatus(server_encoding=UTF8)', 'ParameterStatus(server_version=XXX)', 'ParameterStatus(session_authorization=postgres)', 'ParameterStatus(standard_conforming_strings=on)', 'ParameterStatus(TimeZone=XXX)', 'BackendKeyData(XXX)', 'ReadyForQuery(state=idle)']")
 (0,t,"['Query(query=CREATE  INDEX CONCURRENTLY  idx_index_test_102040 ON public.index_test_XXXXXX USING btree (id ,value_1 ) ']")
(3 rows)

SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE index_test;
CREATE TABLE index_test(id int, value_1 int, value_2 int);
SELECT create_reference_table('index_test');
 create_reference_table 
------------------------
 
(1 row)

-- kill the connection when create command is issued
SELECT citus.mitmproxy('conn.onQuery(query="CREATE").kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT citus.clear_network_traffic();
 clear_network_traffic 
-----------------------
 
(1 row)

CREATE INDEX CONCURRENTLY idx_index_test ON index_test(id, value_1);
ERROR:  CONCURRENTLY-enabled index command failed
DETAIL:  CONCURRENTLY-enabled index commands can fail partially, leaving behind an INVALID index.
HINT:  Use DROP INDEX CONCURRENTLY IF EXISTS to remove the invalid index, then retry the original command.
SELECT citus.dump_network_traffic();
                                                                                                                                                                                                                                                                     dump_network_traffic                                                                                                                                                                                                                                                                     

 (0,t,"[initial message]")
 (0,f,"['AuthenticationOk()', 'ParameterStatus(application_name=citus)', 'ParameterStatus(client_encoding=UTF8)', 'ParameterStatus(DateStyle=ISO, MDY)', 'ParameterStatus(integer_datetimes=on)', 'ParameterStatus(IntervalStyle=postgres)', 'ParameterStatus(is_superuser=on)', 'ParameterStatus(server_encoding=UTF8)', 'ParameterStatus(server_version=XXX)', 'ParameterStatus(session_authorization=postgres)', 'ParameterStatus(standard_conforming_strings=on)', 'ParameterStatus(TimeZone=XXX)', 'BackendKeyData(XXX)', 'ReadyForQuery(state=idle)']")
 (0,t,"['Query(query=CREATE  INDEX CONCURRENTLY  idx_index_test_102042 ON public.index_test_XXXXXX USING btree (id ,value_1 ) ']")
(3 rows)

SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE index_test;
